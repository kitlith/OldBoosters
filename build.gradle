buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven {
            name = 'sponge'
            url = "https://repo.spongepowered.org/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
    }
}

allprojects {
    apply plugin: 'net.minecraftforge.gradle.forge'
    version = "1.1"
    group = "pw.kitl.oldboosters"

    repositories {
        maven {
            name = 'sponge'
            url = "https://repo.spongepowered.org/maven"
        }
    }

    sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
    compileJava {
        sourceCompatibility = targetCompatibility = '1.8'
    }

    minecraft {
        version = "1.12.2-14.23.5.2768"
        runDir = "run"

        // the mappings can be changed at any time, and must be in the following format.
        // snapshot_YYYYMMDD   snapshot are built nightly.
        // stable_#            stables are built at the discretion of the MCP team.
        // Use non-default mappings at your own risk. they may not always work.
        // simply re-run your setup task after changing the mappings to update your workspace.
        mappings = "snapshot_20171003"
        // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    }

    processResources {
        // this will ensure that this task is redone when the versions change.
        inputs.property "version", project.version
        inputs.property "mcversion", project.minecraft.version

        // replace stuff in mcmod.info, nothing else
        from(sourceSets.main.resources.srcDirs) {
            include 'mcmod.info'

            // replace version and mcversion
            expand 'version':project.version, 'mcversion':project.minecraft.version
        }

        // copy everything else except the mcmod.info
        from(sourceSets.main.resources.srcDirs) {
            exclude 'mcmod.info'
        }
    }
}

apply plugin: 'org.spongepowered.mixin'

configurations {
    containedCompile
    compile.extendsFrom containedCompile
    contained.extendsFrom containedCompile
}

dependencies {
    containedCompile('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
    }

    contained(project(':oldboosters_config')) {
        transitive = false
    }
}

project(":oldboosters_config") {
    dependencies {
        compile(project(":"))
    }

    runClient.enabled = false
    runServer.enabled = false
}

ext.getContainedDeps = { ->
    configurations.contained.files.collect {it.getName()}.join(' ')
}

task packedJar(type: Jar) {
    dependsOn('reobfJar', ':oldboosters_config:build')
    manifest.attributes(
        'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
        'TweakOrder': 0,
        'MixinConfigs': 'mixins.oldboosters.json',
        'ContainedDeps': getContainedDeps()
    )

    into '/'
    from sourceSets.main.output
    into("META-INF/libraries/") {
        from configurations.contained.files
    }

    classifier = 'all-unsigned'
    //with jar
}

jar {
    manifest.attributes(
        'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
        'TweakOrder': 0,
        'MixinConfigs': 'mixins.oldboosters.json'
    )

    classifier = 'unsigned'
}

reobf {
    packedJar {} // Reobfuscate the packed JAR
}

mixin {
    add sourceSets.main, "mixins.oldboosters.refmap.json"
}

task signJar(type: SignJar, dependsOn: reobfJar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }

    keyStore = project.keyStore // This needs to be a path to the keystore file
    alias = project.keyStoreAlias
    storePass = project.keyStorePass
    keyPass = project.keyStoreKeyPass
    inputFile = jar.archivePath
    outputFile = new File(jar.archivePath.parent, jar.archivePath.name.replace('-unsigned', ''))
}

task signPackedJar(type: SignJar, dependsOn: reobfPackedJar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }

    keyStore = project.keyStore // This needs to be a path to the keystore file
    alias = project.keyStoreAlias
    storePass = project.keyStorePass
    keyPass = project.keyStoreKeyPass
    inputFile = packedJar.archivePath
    outputFile = new File(jar.archivePath.parent, packedJar.archivePath.name.replace('-unsigned', ''))
}

build.dependsOn(signJar, signPackedJar)

runClient {
    dependsOn tasks.getByPath(':oldboosters_config:jar')
    args = ['--tweakClass', 'org.spongepowered.asm.launch.MixinTweaker']
    classpath(tasks.getByPath(':oldboosters_config:jar').getOutputs().getFiles().getAsPath())
    outputs.upToDateWhen { false }
}

runServer {
    dependsOn tasks.getByPath(':oldboosters_config:jar')
    args = ['--tweakClass', 'org.spongepowered.asm.launch.MixinTweaker']
    classpath(tasks.getByPath(':oldboosters_config:jar').getOutputs().getFiles().getAsPath())
    outputs.upToDateWhen { false }
}
